# Amazon Web Services

- Access AWS console and go to IAM service
- Under Access management, Click in "Users", then "Add users". Insert the User name **terraform-en-1** and click in **Next** to create a programmatic user.
- On Set permissions, Permissions options, click in "Attach policies directly" button.
- Type **AmazonS3FullAccess** in **Filter distributions by text, property or value,** press Enter.
- Select **AmazonS3FullAccess**
- Click in **Next**
- Review all details, then click **Create user.**
**[NEW] AWS has recently changed the way to download the key. Follow the new steps:**

- Click on the user you have created.
- After this, click on **Security credentials** tab.
- Scroll down and go to Access keys section.
- Click on **Create access key**
- Select **Command Line Interface (CLI)** and **I understand the above recommendation and want to proceed to create an access key** checkbox.
- Click Next.
- Click on **Create access key**
- Click on Download .csv file

### [TIP] **Access key best practices**

- Never store your access key in plain text, in a code repository, or in code.
- Disable or delete access key when no longer needed.
- Enable least-privilege permissions.
- Rotate access keys regularly.

- After download, click **Done**.
- Now, rename .csv file downloaded to accessKeys.csv

# Google Cloud Platform (GCP)

- **[CLICK HERE to download the hands-on files](https://tcb-public-events.s3.amazonaws.com/icp/mission1.zip)**[.](https://objectstorage.us-ashburn-1.oraclecloud.com/p/mE7kdT1O8UppsI0aV6qxwi8Rfm4YAn3A9rIX6Yv1FxE2Rv6mI1W_RrUs2CBYWxAx/n/idqfa2z2mift/b/eventos-thecloudbootcamp/o/ICP2/mission1.zip)
- Access GCP Console and open Cloud Shell
- Upload accessKeys.csv and .zip hands-on file to GCP Cloud Shell
- Hands-on files preparation

CODE
mkdir mission1_en
mv mission1.zip mission1_en
cd mission1_en
unzip mission1.zip
mv ~/accessKeys.csv mission1/en
cd mission1/en
chmod +x *.sh               // do this last

- Run the following commands to prepare AWS and GCP environment. Authorize when asked.

CODE 
./aws_set_credentials.sh accessKeys.csv
gcloud config set project <project_id> // you can find the id on the top by clicking on the MY FIRST PROJECT and there is a ID

- Execute the command below

CODE 
./gcp_set_project.sh

- Enable the Container Registry API, Kubernetes Engine API and the Cloud SQL API

CODE 
gcloud services enable containerregistry.googleapis.com 
gcloud services enable container.googleapis.com 
gcloud services enable sqladmin.googleapis.com 


**IMPORTANT (DO NOT SKIP):**

- **Before executing the Terraform commands, open the Google Editor and update the file tcb_aws_storage.tf replacing the bucket name with an unique name (AWS requires unique bucket names).**
    - Open the tcb_aws_storage.tf using Google Editor
    - On line 4 of the file tcb_aws_storage.tf:
        - Replace xxxx with your name initials plus two random numbers:
        Example: luxxy-covid-testing-system-pdf-en-jr29
        I changed the xxxx to kl01

- Run the following commands to finish provision infrastructure steps

CODE 
cd ~/mission1_en/mission1/en/terraform/

terraform init
terraform plan
terraform apply
	Type yes and go ahead.



- After access the GKE Service to create a cluster, click on the Compare button to “Compare cluster modes to learn more about their differences”.

You can check your Bucket in AWS by searching S3 and see if what you created is there
and search GKE on google cloud that you see your uploaded project on pending
the terminal will take about 10-15 mins to run in the background


SQL Network Configuration

- Once the Cloud SQL instance is provisioned, access the Cloud SQL service
- Click on your Cloud SQL instance.
- On the left side, under Primary Instance, click on **Connections**.
- Go to **Networking** tab.
- Under **Instance IP assignment**, select Private IP to enable.
    - Under **Associated networking**, select "Default"
    - Click **Set up Connection**
    - Click on **Enable API**, to enable Service Networking API (if asked).
    - Select **Use an automatically allocated IP range in your network**.
    - Click **Continue**
    - Click **Create Connection** and **wait a minutes until conclude.** You will see the message: “*Private services access connection for network default
     has been successfully created.”*
- Under **Authorized Networks**, click "Add Network".
- Under **New Network**, enter the following information:
    - **Name:** Public Access (For testing purposes only)
    - **Network**: 0.0.0.0/0
    - Click **Done**.
    - Click **Save** and ****wait to finish the update.

PS: For production environments, it is recommended to use only the Private Network for database access. 
⚠️  Never grant public network access (0.0.0.0/0) to production databases.